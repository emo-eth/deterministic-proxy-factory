// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import { MINIMAL_PROXY_SOLADY_ADDRESS, MINIMAL_PROXY_SOLADY_SALT } from "src/Constants.sol";

import { MinimalUpgradeableProxySolady } from "src/MinimalUpgradeableProxySolady.sol";

/**
 * @title MinimalUpgradeableProxySoladyFixture
 * @notice A helper library for deploying the MinimalUpgradeableProxySolady in tests. Import and
 * call in the setUp() function.
 */
library MinimalUpgradeableProxySoladyFixture {

    bytes constant MINIMAL_PROXY_SOLADY_INITCODE =
        hex"60a080604052346099573060805263409feecd195460018116608c5760011c6002600160401b0319016048575b610794908161009e823960805181818161047901526105480152f35b6002600160411b0363409feecd19556001600160401b0360209081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29080a1602c565b63f92ee8a95f526004601cfd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806325692962146106455780634f1ef286146104d457806352d1902d1461044857806354d1f13d146103e6578063715018a6146103495780638da5cb5b146102d9578063c4d66de8146101a1578063f04e283e14610136578063f2fde38b146100db5763fee81cf414610087575f80fd5b346100d75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d7576100be6106ac565b63389a75e1600c525f52602080600c2054604051908152f35b5f80fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d75761010d6106ac565b6101156106cf565b8060601b156101295761012790610706565b005b637448fbae5f526004601cfd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d7576101686106ac565b6101706106cf565b63389a75e1600c52805f526020600c209081544211610194575f6101279255610706565b636f5e88185f526004601cfd5b346100d75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d7576101d86106ac565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf601132908154806003845561029d575b5073ffffffffffffffffffffffffffffffffffffffff829116807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927555f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a361026d57005b6002905560016020527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602080a1005b91600183811c14303b10156102cc5773ffffffffffffffffffffffffffffffffffffffff9260ff1b1b91610206565b63f92ee8a95f526004601cfd5b346100d7575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d75760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275473ffffffffffffffffffffffffffffffffffffffff60405191168152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d75761037a6106cf565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a35f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392755005b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d75763389a75e1600c52335f525f6020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c925f80a2005b346100d7575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d757307f0000000000000000000000000000000000000000000000000000000000000000036104c75760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b639f03a0265f526004601cfd5b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d7576105066106ac565b6024359067ffffffffffffffff82116100d757366023830112156100d75781600401359067ffffffffffffffff82116100d75736602483850101116100d757307f0000000000000000000000000000000000000000000000000000000000000000146104c75773ffffffffffffffffffffffffffffffffffffffff9061058a6106cf565b163d5f526352d1902d6001527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc602060016004601d855afa510361063757807fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a281817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5561061757005b815f926024604051950185378338925af41561062f57005b3d5f823e3d90fd5b6355299b496001526004601dfd5b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d75763389a75e1600c52335f526202a30042016020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a2005b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100d757565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275433036106f957565b6382b429005f526004601cfd5b73ffffffffffffffffffffffffffffffffffffffff16807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275556fea164736f6c634300081d000a";

    address constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
    MinimalUpgradeableProxySolady internal constant
        MINIMAL_UPGRADEABLE_PROXY_SOLADY_IMPLEMENTATION =
            MinimalUpgradeableProxySolady(MINIMAL_PROXY_SOLADY_ADDRESS);

    function setUpMinimalUpgradeableProxySoladyFixture() public returns (address) {
        if (address(MINIMAL_UPGRADEABLE_PROXY_SOLADY_IMPLEMENTATION).code.length > 0) {
            return MINIMAL_PROXY_SOLADY_ADDRESS;
        }

        (bool success, bytes memory result) = CREATE2_FACTORY.call(
            abi.encodePacked(MINIMAL_PROXY_SOLADY_SALT, MINIMAL_PROXY_SOLADY_INITCODE)
        );
        bytes20 resultBytes;
        /// @solidity memory-safe-assembly
        assembly {
            resultBytes := mload(add(result, 0x20))
        }
        address resultAddress = address(resultBytes);
        require(success, "Failed to deploy minimal proxy solady");
        require(
            resultAddress == MINIMAL_PROXY_SOLADY_ADDRESS,
            "MinimalUpgradeableProxySolady address mismatch"
        );
        return resultAddress;
    }

    function getAddress() public pure returns (address) {
        return address(MINIMAL_UPGRADEABLE_PROXY_SOLADY_IMPLEMENTATION);
    }

    function getType() public pure returns (MinimalUpgradeableProxySolady) {
        return MINIMAL_UPGRADEABLE_PROXY_SOLADY_IMPLEMENTATION;
    }

}
