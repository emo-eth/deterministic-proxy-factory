// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {
    DETERMINISTIC_PROXY_FACTORY_ADDRESS,
    DETERMINISTIC_PROXY_FACTORY_SALT,
    MINIMAL_UUPS_UPGRADEABLE_ADDRESS
} from "../Constants.sol";
import { DeterministicProxyFactory } from "../DeterministicProxyFactory.sol";

import {
    MinimalUUPSUpgradeable,
    MinimalUUPSUpgradeableFixture
} from "./MinimalUUPSUpgradeableFixture.sol";
import { UUPSUpgradeable } from "solady/utils/UUPSUpgradeable.sol";

/**
 * @title DeterministicProxyFactoryFixture
 * @notice Test fixture for deploying the DeterministicProxyFactory. Import and use in setUp().
 */
library DeterministicProxyFactoryFixture {

    error CallDataRequired();

    bytes constant DETERMINISTIC_PROXY_FACTORY_INITCODE =
        hex"60808060405234601557610b3e908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80632e21ae031461044b57806333722ce014610432578063c020d871146102ce578063da91c54f1461009d578063decbdad4146100845763e0d51fdc1461005e57600080fd5b3461007f57602061007761007136610616565b916109c8565b604051908152f35b600080fd5b3461007f57602061007761009736610616565b91610907565b6100a636610581565b6100b38594969395610afb565b6000811561020457506100cc601692607592369161072e565b6040519381518092816020608b8901920160045afa507fb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3606b8601527f1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c604b8601527660195155f3363d3d373d3d363d602036600436635c60da602b86015260148501528060381b6afe6100523d8160233d39730161ffad821185015201910134f580156101f657915b8161019d575b60208373ffffffffffffffffffffffffffffffffffffffff60405191168152f35b8160009291839260405192839283378101838152039082855af16101bf61075f565b50156101cc57818061017c565b7fe9349fdc0000000000000000000000000000000000000000000000000000000060005260046000fd5b63301164256000526004601cfd5b929391505073ffffffffffffffffffffffffffffffffffffffff604051937fb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f36060527f1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c6040527660195155f3363d3d373d3d363d602036600436635c60da602052167c60523d8160223d39730000000000000000000000000000000000000000176009526074600c34f59182156102c15760405260605291610176565b633011642582526004601cfd5b6102d736610581565b6102e48594969395610afb565b600081156103b257506060916102fb91369161072e565b6040519281518092816020868801920160045afa507fcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f360408501527f5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e207660208501526160096016526014528060381b6afe61003d3d8160233d39730161ffc28211526016518352019034f580156101f657918161019d5760208373ffffffffffffffffffffffffffffffffffffffff60405191168152f35b9293915050604051927fcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f36060527f5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076604052616009602052601e5268603d3d8160223d3973600a52605f602134f59182156102c15760405260605291610176565b3461007f57602061007761044536610616565b91610785565b61045436610581565b6104618594969395610afb565b600081156105005750600b9161047891369161072e565b91604051908351809481602060438601920160045afa506e5af43d82803e903d91602b57fd5bf3602383015260148201528260881b74fe61002d3d81600a3d39f3363d3d373d3d3d363d7301815261ffd3603784019310010134f580156101f657918161019d5760208373ffffffffffffffffffffffffffffffffffffffff60405191168152f35b93929150506c5af43d3d93803e602a57fd5bf360215260145273602c3d8160093d39f33d3d3d3d363d3d37363d7382526035600c34f59081156105465760215291610176565b633011642590526004601cfd5b9181601f8401121561007f5782359167ffffffffffffffff831161007f576020838186019501011161007f57565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261007f5760043573ffffffffffffffffffffffffffffffffffffffff8116810361007f57916024359160443567ffffffffffffffff811161007f57816105ef91600401610553565b929092916064359067ffffffffffffffff821161007f5761061291600401610553565b9091565b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261007f5760043573ffffffffffffffffffffffffffffffffffffffff8116810361007f57916024359067ffffffffffffffff821161007f5761061291600401610553565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff8211176106c557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116106c557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b92919261074261073d836106f4565b610681565b938285528282011161007f57816000926020928387013784010152565b3d15610780573d9061077361073d836106f4565b9182523d6000602084013e565b606090565b91908161083e57505073ffffffffffffffffffffffffffffffffffffffff604051917fb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f36060527f1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c6040527660195155f3363d3d373d3d363d602036600436635c60da602052167c60523d8160223d39730000000000000000000000000000000000000000176009526074600c2090604052600060605290565b61084991369161072e565b6040519181519161ffad83113d3d3e60005b8381106108f15750506016916075917fb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3606b8601527f1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c604b8601527660195155f3363d3d373d3d363d602036600436635c60da602b86015260148501528060381b696100523d8160233d39730184520191012090565b806020809284010151608b82880101520161085b565b9190816109495750506c5af43d3d93803e602a57fd5bf360215260145273602c3d8160093d39f33d3d3d3d363d3d37363d736000526035600c20600060215290565b61095491369161072e565b6040519181519161ffd283113d3d3e60005b8381106109b2575050600c916037916e5af43d82803e903d91602b57fd5bf3602386015260148501528060881b7361002d3d81600a3d39f3363d3d373d3d3d363d730184520191012090565b8060208092840101516043828801015201610966565b929180610a4557505090604051907fcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f36060527f5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076604052616009602052601e5268603d3d8160223d3973600a52605f60212090604052600060605290565b90610a5191369161072e565b916040519083519061ffc282113d3d3e60005b828110610ae55750829394507fcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3604060609401527f5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e207660208501526160096016526014528060381b6961003d3d8160233d397301600052601651835201902090565b8060208092880101516060828701015201610a64565b339060601c03610b0757565b7f043c669f0000000000000000000000000000000000000000000000000000000060005260046000fdfea164736f6c634300081d000a";
    address constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
    DeterministicProxyFactory internal constant DETERMINISTIC_PROXY_FACTORY =
        DeterministicProxyFactory(DETERMINISTIC_PROXY_FACTORY_ADDRESS);

    function setUpDeterministicProxyFactory() internal returns (address) {
        return setUpDeterministicProxyFactory(DETERMINISTIC_PROXY_FACTORY_INITCODE, true);
    }

    function setUpDeterministicProxyFactory(bool enforceAddress) internal returns (address) {
        return setUpDeterministicProxyFactory(DETERMINISTIC_PROXY_FACTORY_INITCODE, enforceAddress);
    }

    function setUpDeterministicProxyFactory(bytes memory initcode, bool enforceAddress)
        internal
        returns (address)
    {
        if (enforceAddress && address(DETERMINISTIC_PROXY_FACTORY).code.length > 0) {
            return DETERMINISTIC_PROXY_FACTORY_ADDRESS;
        }
        (bool success, bytes memory result) =
            CREATE2_FACTORY.call(abi.encodePacked(DETERMINISTIC_PROXY_FACTORY_SALT, initcode));
        bytes20 resultBytes;
        /// @solidity memory-safe-assembly
        assembly {
            resultBytes := mload(add(result, 0x20))
        }
        address resultAddress = address(resultBytes);
        require(success, "Failed to deploy DeterministicProxyFactory");
        require(
            !enforceAddress || resultAddress == DETERMINISTIC_PROXY_FACTORY_ADDRESS,
            "DeterministicProxyFactory address mismatch"
        );
        return resultAddress;
    }

    function deterministicProxyUUPS(
        bytes32 initialProxySalt,
        address implementation,
        bytes memory upgradeCallData
    ) internal returns (address) {
        setUpDeterministicProxyFactory();
        MinimalUUPSUpgradeableFixture.setUpMinimalUUPSUpgradeable();
        address initialProxy = DETERMINISTIC_PROXY_FACTORY.deploy({
            implementation: MINIMAL_UUPS_UPGRADEABLE_ADDRESS,
            salt: initialProxySalt,
            callData: abi.encodeCall(
                UUPSUpgradeable.upgradeToAndCall, (implementation, upgradeCallData)
            ),
            immutableArgs: ""
        });
        return initialProxy;
    }

}
